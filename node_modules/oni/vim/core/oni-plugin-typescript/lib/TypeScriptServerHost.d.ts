/// <reference path="../../../../node_modules/typescript/lib/protocol.d.ts" />
/// <reference types="node" />
import * as events from "events";
export declare class TypeScriptServerHost extends events.EventEmitter {
    private _tssProcess;
    private _seqNumber;
    private _seqToPromises;
    private _rl;
    readonly pid: number;
    constructor();
    openFile(file: string): Promise<any>;
    getProjectInfo(file: string): Promise<any>;
    getTypeDefinition(file: string, line: number, offset: number): Promise<void>;
    getFormattingEdits(file: string, line: number, offset: number, endLine: number, endOffset: number): Promise<any>;
    getCompletions(file: string, line: number, offset: number, prefix: string): Promise<any>;
    getCompletionDetails(file: string, line: number, offset: number, entryNames: string[]): Promise<any>;
    updateFile(file: string, fileContent: string): Promise<void>;
    changeLineInFile(file: string, line: number, newLineContents: string): Promise<void>;
    getQuickInfo(file: string, line: number, offset: number): Promise<void>;
    saveTo(file: string, tmpfile: string): Promise<void>;
    getSignatureHelp(file: string, line: number, offset: number): Promise<any>;
    getErrors(fullFilePath: string): Promise<void>;
    getErrorsAcrossProject(fullFilePath: string): Promise<void>;
    getNavigationTree(fullFilePath: string): Promise<protocol.NavigationTree>;
    getDocumentHighlights(file: string, line: number, offset: number): Promise<void>;
    findAllReferences(file: string, line: number, offset: number): Promise<protocol.ReferencesResponseBody>;
    _makeTssRequest<T>(commandName: string, args: any): Promise<T>;
    private _parseResponse(returnedData);
    private _createDeferredPromise<T>();
}
