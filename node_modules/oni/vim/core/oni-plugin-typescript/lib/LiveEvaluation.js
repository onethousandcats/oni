"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var _ = require("lodash");
var findParentDir = require("find-parent-dir"); // tslint:disable-line no-var-requires
/**
 * Get all top-level requires / imports from buffer
 */
exports.getCommonImports = function (bufferLines) {
    return bufferLines.filter(function (line) {
        return (line.trim().indexOf("import") === 0 || line.indexOf("require(") >= 0) && line.indexOf("ignore-live") === -1 && line.indexOf("return") === -1;
    });
};
exports.evaluateBlock = function (id, fileName, code) {
    var vm = require("vm");
    var ts = require("typescript");
    code = ts.transpileModule(code, { target: "ES6" }).outputText;
    var compilationError = null;
    var script = null;
    try {
        script = new vm.Script(code);
    }
    catch (ex) {
        compilationError = ex.toString();
    }
    if (compilationError) {
        return Promise.resolve({
            id: id,
            fileName: fileName,
            result: null,
            output: null,
            errors: [compilationError],
        });
    }
    var Module = require("module");
    var mod = new Module(fileName);
    var util = require("util");
    var sandbox = {
        exports: {},
        module: mod,
        __filename: fileName,
        __dirname: path.dirname(fileName),
        require: function (requirePath) {
            try {
                var path_1 = require("path");
                // See if this is a 'node_modules' dependency:
                var modulePath = findParentDir.sync(__dirname, path_1.join("node_modules", requirePath));
                if (modulePath) {
                    requirePath = path_1.join(modulePath, "node_modules", requirePath);
                }
                return mod.require(requirePath);
            }
            catch (ex) {
                // TODO: Log require error here
                debugger; // tslint:disable-line no-debugger
            }
        },
    };
    var result = null;
    var errors = [];
    try {
        result = script.runInNewContext(sandbox);
    }
    catch (ex) {
        errors = [ex.toString()];
    }
    var initialResult = {
        id: id,
        fileName: fileName,
        output: null,
        errors: errors,
    };
    if (result && result.then) {
        return result.then(function (val) { return (_.extend({}, initialResult, {
            result: util.inspect(val),
            variables: util.inspect(sandbox),
        })); }, function (err) { return (_.extend({}, initialResult, {
            variables: util.inspect(sandbox),
            errors: [err],
        })); });
    }
    else {
        return Promise.resolve(_.extend({}, initialResult, {
            result: util.inspect(result),
            variables: util.inspect(sandbox),
        }));
    }
};
//# sourceMappingURL=LiveEvaluation.js.map